/* eslint-disable */

// import lib

const peggyParser: { parse: any; SyntaxError: any; DefaultTracer?: any } = // Generated by Peggy 3.0.2.
	//
	// https://peggyjs.org/
	// @ts-ignore
	(function () {
		// @ts-ignore
		"use strict";

		// @ts-ignore
		function peg$subclass(child, parent) {
			// @ts-ignore
			function C() {
        // @ts-ignore
				this.constructor = child;
			}
			// @ts-ignore
			C.prototype = parent.prototype;
			// @ts-ignore
			child.prototype = new C();
		}

		// @ts-ignore
		function peg$SyntaxError(message, expected, found, location) {
			// @ts-ignore
			var self = Error.call(this, message);
			// istanbul ignore next Check is a necessary evil to support older environments
			// @ts-ignore
			if (Object.setPrototypeOf) {
				// @ts-ignore
				Object.setPrototypeOf(self, peg$SyntaxError.prototype);
			}
			// @ts-ignore
			self.expected = expected;
			// @ts-ignore
			self.found = found;
			// @ts-ignore
			self.location = location;
			// @ts-ignore
			self.name = "SyntaxError";
			// @ts-ignore
			return self;
		}

		// @ts-ignore
		peg$subclass(peg$SyntaxError, Error);

		// @ts-ignore
		function peg$padEnd(str, targetLength, padString) {
			// @ts-ignore
			padString = padString || " ";
			// @ts-ignore
			if (str.length > targetLength) {
				return str;
			}
			// @ts-ignore
			targetLength -= str.length;
			// @ts-ignore
			padString += padString.repeat(targetLength);
			// @ts-ignore
			return str + padString.slice(0, targetLength);
		}

		// @ts-ignore
		peg$SyntaxError.prototype.format = function (sources) {
			// @ts-ignore
			var str = "Error: " + this.message;
			// @ts-ignore
			if (this.location) {
				// @ts-ignore
				var src = null;
				// @ts-ignore
				var k;
				// @ts-ignore
				for (k = 0; k < sources.length; k++) {
					// @ts-ignore
					if (sources[k].source === this.location.source) {
						// @ts-ignore
						src = sources[k].text.split(/\r\n|\n|\r/g);
						// @ts-ignore
						break;
					}
				}
				// @ts-ignore
				var s = this.location.start;
				// @ts-ignore
				var offset_s =
					this.location.source &&
					typeof this.location.source.offset === "function"
						? // @ts-ignore
						  this.location.source.offset(s)
						: // @ts-ignore
						  s;
				// @ts-ignore
				var loc =
					this.location.source + ":" + offset_s.line + ":" + offset_s.column;
				// @ts-ignore
				if (src) {
					// @ts-ignore
					var e = this.location.end;
					// @ts-ignore
					var filler = peg$padEnd("", offset_s.line.toString().length, " ");
					// @ts-ignore
					var line = src[s.line - 1];
					// @ts-ignore
					var last = s.line === e.line ? e.column : line.length + 1;
					// @ts-ignore
					var hatLen = last - s.column || 1;
					// @ts-ignore
					str +=
						"\n --> " +
						loc +
						"\n" +
						// @ts-ignore
						filler +
						" |\n" +
						// @ts-ignore
						offset_s.line +
						" | " +
						line +
						"\n" +
						// @ts-ignore
						filler +
						" | " +
						peg$padEnd("", s.column - 1, " ") +
						// @ts-ignore
						peg$padEnd("", hatLen, "^");
					// @ts-ignore
				} else {
					// @ts-ignore
					str += "\n at " + loc;
				}
			}
			// @ts-ignore
			return str;
		};

		// @ts-ignore
		peg$SyntaxError.buildMessage = function (expected, found) {
			// @ts-ignore
			var DESCRIBE_EXPECTATION_FNS = {
				// @ts-ignore
				literal: function (expectation) {
					// @ts-ignore
					return '"' + literalEscape(expectation.text) + '"';
				},

				// @ts-ignore
				class: function (expectation) {
					// @ts-ignore
					var escapedParts = expectation.parts.map(function (part) {
						// @ts-ignore
						return Array.isArray(part)
							? // @ts-ignore
							  classEscape(part[0]) + "-" + classEscape(part[1])
							: // @ts-ignore
							  classEscape(part);
					});

					// @ts-ignore
					return (
						"[" +
						(expectation.inverted ? "^" : "") +
						escapedParts.join("") +
						"]"
					);
				},

				// @ts-ignore
				any: function () {
					// @ts-ignore
					return "any character";
				},

				// @ts-ignore
				end: function () {
					// @ts-ignore
					return "end of input";
				},

				// @ts-ignore
				other: function (expectation) {
					// @ts-ignore
					return expectation.description;
				},
			};

			// @ts-ignore
			function hex(ch) {
				// @ts-ignore
				return ch.charCodeAt(0).toString(16).toUpperCase();
			}

			// @ts-ignore
			function literalEscape(s) {
				// @ts-ignore
				return (
					s
						// @ts-ignore
						.replace(/\\/g, "\\\\")
						// @ts-ignore
						.replace(/"/g, '\\"')
						// @ts-ignore
						.replace(/\0/g, "\\0")
						// @ts-ignore
						.replace(/\t/g, "\\t")
						// @ts-ignore
						.replace(/\n/g, "\\n")
						// @ts-ignore
						.replace(/\r/g, "\\r")
						// @ts-ignore
						.replace(/[\x00-\x0F]/g, function (ch) {
							return "\\x0" + hex(ch);
						})
						// @ts-ignore
						.replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
							return "\\x" + hex(ch);
						})
				);
			}

			// @ts-ignore
			function classEscape(s) {
				// @ts-ignore
				return (
					s
						// @ts-ignore
						.replace(/\\/g, "\\\\")
						// @ts-ignore
						.replace(/\]/g, "\\]")
						// @ts-ignore
						.replace(/\^/g, "\\^")
						// @ts-ignore
						.replace(/-/g, "\\-")
						// @ts-ignore
						.replace(/\0/g, "\\0")
						// @ts-ignore
						.replace(/\t/g, "\\t")
						// @ts-ignore
						.replace(/\n/g, "\\n")
						// @ts-ignore
						.replace(/\r/g, "\\r")
						// @ts-ignore
						.replace(/[\x00-\x0F]/g, function (ch) {
							return "\\x0" + hex(ch);
						})
						// @ts-ignore
						.replace(/[\x10-\x1F\x7F-\x9F]/g, function (ch) {
							return "\\x" + hex(ch);
						})
				);
			}

			// @ts-ignore
			function describeExpectation(expectation) {
				// @ts-ignore
				return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
			}

			// @ts-ignore
			function describeExpected(expected) {
				// @ts-ignore
				var descriptions = expected.map(describeExpectation);
				// @ts-ignore
				var i, j;

				// @ts-ignore
				descriptions.sort();

				// @ts-ignore
				if (descriptions.length > 0) {
					// @ts-ignore
					for (i = 1, j = 1; i < descriptions.length; i++) {
						// @ts-ignore
						if (descriptions[i - 1] !== descriptions[i]) {
							// @ts-ignore
							descriptions[j] = descriptions[i];
							// @ts-ignore
							j++;
						}
					}
					// @ts-ignore
					descriptions.length = j;
				}

				// @ts-ignore
				switch (descriptions.length) {
					// @ts-ignore
					case 1:
						// @ts-ignore
						return descriptions[0];

					// @ts-ignore
					case 2:
						// @ts-ignore
						return descriptions[0] + " or " + descriptions[1];

					// @ts-ignore
					default:
						// @ts-ignore
						return (
							descriptions.slice(0, -1).join(", ") +
							// @ts-ignore
							", or " +
							// @ts-ignore
							descriptions[descriptions.length - 1]
						);
				}
			}

			// @ts-ignore
			function describeFound(found) {
				// @ts-ignore
				return found ? '"' + literalEscape(found) + '"' : "end of input";
			}

			// @ts-ignore
			return (
				"Expected " +
				describeExpected(expected) +
				" but " +
				describeFound(found) +
				" found."
			);
		};

		// @ts-ignore
		function peg$parse(input, options) {
			// @ts-ignore
			options = options !== undefined ? options : {};

			// @ts-ignore
			var peg$FAILED = {};
			// @ts-ignore
			var peg$source = options.grammarSource;

			// @ts-ignore
			var peg$startRuleFunctions = { start: peg$parsestart };
			// @ts-ignore
			var peg$startRuleFunction = peg$parsestart;

			// @ts-ignore
			var peg$c0 = "//";
			var peg$c1 = ":";
			var peg$c2 = " ";
			var peg$c3 = "=";
			var peg$c4 = ",";
			var peg$c5 = "});";
			var peg$c6 = "z.object({";
			var peg$c7 = "const";
			var peg$c8 = "export";
			var peg$c9 = "\n";
			var peg$c10 = "\r\n";
			var peg$c11 = "\r";

			var peg$r0 = /^[ \t]/;

			var peg$e0 = peg$literalExpectation("//", false);
			var peg$e1 = peg$anyExpectation();
			var peg$e2 = peg$literalExpectation(":", false);
			var peg$e3 = peg$classExpectation([" ", "\t"], false, false);
			var peg$e4 = peg$literalExpectation(" ", false);
			var peg$e5 = peg$literalExpectation("=", false);
			var peg$e6 = peg$literalExpectation(",", false);
			var peg$e7 = peg$literalExpectation("});", false);
			var peg$e8 = peg$literalExpectation("z.object({", false);
			var peg$e9 = peg$literalExpectation("const", false);
			var peg$e10 = peg$literalExpectation("export", false);
			var peg$e11 = peg$literalExpectation("\n", false);
			var peg$e12 = peg$literalExpectation("\r\n", false);
			var peg$e13 = peg$literalExpectation("\r", false);
			// @ts-ignore

			var peg$f0 = function (lines) {
				// @ts-ignore
				return lines.filter((x) => x !== null);
			}; // @ts-ignore

			var peg$f1 = function () {
				// @ts-ignore
				return null;
			}; // @ts-ignore

			var peg$f2 = function (header, properties) {
				// @ts-ignore
				return { tableName: header, properties };
			}; // @ts-ignore

			var peg$f3 = function () {
				// @ts-ignore
				return null;
			}; // @ts-ignore

			var peg$f4 = function (key, value) {
				// @ts-ignore
				return { name: key, schema: value };
			}; // @ts-ignore

			var peg$f5 = function (text) {
				// @ts-ignore
				return text;
			}; // @ts-ignore

			var peg$f6 = function (c) {
				// @ts-ignore
				return c;
			}; // @ts-ignore

			var peg$f7 = function (name) {
				// @ts-ignore
				return name;
			};
			// @ts-ignore
			var peg$currPos = 0;
			// @ts-ignore
			var peg$savedPos = 0;
			// @ts-ignore
			var peg$posDetailsCache = [{ line: 1, column: 1 }];
			// @ts-ignore
			var peg$maxFailPos = 0;
			// @ts-ignore
			var peg$maxFailExpected = [];
			// @ts-ignore
			var peg$silentFails = 0;

			// @ts-ignore
			var peg$result;

			// @ts-ignore
			if ("startRule" in options) {
				// @ts-ignore
				if (!(options.startRule in peg$startRuleFunctions)) {
					// @ts-ignore
					throw new Error(
						"Can't start parsing from rule \"" + options.startRule + '".',
					);
				}

				// @ts-ignore
				peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
			}

			// @ts-ignore
			function text() {
				// @ts-ignore
				return input.substring(peg$savedPos, peg$currPos);
			}

			// @ts-ignore
			function offset() {
				// @ts-ignore
				return peg$savedPos;
			}

			// @ts-ignore
			function range() {
				// @ts-ignore
				return {
					// @ts-ignore
					source: peg$source,
					// @ts-ignore
					start: peg$savedPos,
					// @ts-ignore
					end: peg$currPos,
				};
			}

			// @ts-ignore
			function location() {
				// @ts-ignore
				return peg$computeLocation(peg$savedPos, peg$currPos);
			}

			// @ts-ignore
			function expected(description, location) {
				// @ts-ignore
				location =
					location !== undefined
						? // @ts-ignore
						  location
						: // @ts-ignore
						  peg$computeLocation(peg$savedPos, peg$currPos);

				// @ts-ignore
				throw peg$buildStructuredError(
					// @ts-ignore
					[peg$otherExpectation(description)],
					// @ts-ignore
					input.substring(peg$savedPos, peg$currPos),
					// @ts-ignore
					location,
				);
			}

			// @ts-ignore
			function error(message, location) {
				// @ts-ignore
				location =
					location !== undefined
						? // @ts-ignore
						  location
						: // @ts-ignore
						  peg$computeLocation(peg$savedPos, peg$currPos);

				// @ts-ignore
				throw peg$buildSimpleError(message, location);
			}

			// @ts-ignore
			function peg$literalExpectation(text, ignoreCase) {
				// @ts-ignore
				return { type: "literal", text: text, ignoreCase: ignoreCase };
			}

			// @ts-ignore
			function peg$classExpectation(parts, inverted, ignoreCase) {
				// @ts-ignore
				return {
					type: "class",
					parts: parts,
					inverted: inverted,
					ignoreCase: ignoreCase,
				};
			}

			// @ts-ignore
			function peg$anyExpectation() {
				// @ts-ignore
				return { type: "any" };
			}

			// @ts-ignore
			function peg$endExpectation() {
				// @ts-ignore
				return { type: "end" };
			}

			// @ts-ignore
			function peg$otherExpectation(description) {
				// @ts-ignore
				return { type: "other", description: description };
			}

			// @ts-ignore
			function peg$computePosDetails(pos) {
				// @ts-ignore
				var details = peg$posDetailsCache[pos];
				// @ts-ignore
				var p;

				// @ts-ignore
				if (details) {
					// @ts-ignore
					return details;
					// @ts-ignore
				} else {
					// @ts-ignore
					p = pos - 1;
					// @ts-ignore
					while (!peg$posDetailsCache[p]) {
						// @ts-ignore
						p--;
					}

					// @ts-ignore
					details = peg$posDetailsCache[p];
					// @ts-ignore
					details = {
						// @ts-ignore
						line: details.line,
						// @ts-ignore
						column: details.column,
					};

					// @ts-ignore
					while (p < pos) {
						// @ts-ignore
						if (input.charCodeAt(p) === 10) {
							// @ts-ignore
							details.line++;
							// @ts-ignore
							details.column = 1;
							// @ts-ignore
						} else {
							// @ts-ignore
							details.column++;
						}

						// @ts-ignore
						p++;
					}

					// @ts-ignore
					peg$posDetailsCache[pos] = details;

					// @ts-ignore
					return details;
				}
			}

			// @ts-ignore
			function peg$computeLocation(startPos, endPos, offset) {
				// @ts-ignore
				var startPosDetails = peg$computePosDetails(startPos);
				// @ts-ignore
				var endPosDetails = peg$computePosDetails(endPos);

				// @ts-ignore
				var res = {
					// @ts-ignore
					source: peg$source,
					// @ts-ignore
					start: {
						// @ts-ignore
						offset: startPos,
						// @ts-ignore
						line: startPosDetails.line,
						// @ts-ignore
						column: startPosDetails.column,
					},
					// @ts-ignore
					end: {
						// @ts-ignore
						offset: endPos,
						// @ts-ignore
						line: endPosDetails.line,
						// @ts-ignore
						column: endPosDetails.column,
					},
				};
				// @ts-ignore
				if (offset && peg$source && typeof peg$source.offset === "function") {
					// @ts-ignore
					res.start = peg$source.offset(res.start);
					// @ts-ignore
					res.end = peg$source.offset(res.end);
				}
				// @ts-ignore
				return res;
			}

			// @ts-ignore
			function peg$fail(expected) {
				// @ts-ignore
				if (peg$currPos < peg$maxFailPos) {
					return;
				}

				// @ts-ignore
				if (peg$currPos > peg$maxFailPos) {
					// @ts-ignore
					peg$maxFailPos = peg$currPos;
					// @ts-ignore
					peg$maxFailExpected = [];
				}

				// @ts-ignore
				peg$maxFailExpected.push(expected);
			}

			// @ts-ignore
			function peg$buildSimpleError(message, location) {
				// @ts-ignore
				return new peg$SyntaxError(message, null, null, location);
			}

			// @ts-ignore
			function peg$buildStructuredError(expected, found, location) {
				// @ts-ignore
				return new peg$SyntaxError(
					// @ts-ignore
					peg$SyntaxError.buildMessage(expected, found),
					// @ts-ignore
					expected,
					// @ts-ignore
					found,
					// @ts-ignore
					location,
				);
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parsestart() {
				// @ts-ignore
				var s0, s1, s2;

				// @ts-ignore
				s0 = peg$currPos;
				// @ts-ignore
				s1 = [];
				// @ts-ignore
				s2 = peg$parseschemaDefinition();
				// @ts-ignore
				if (s2 === peg$FAILED) {
					// @ts-ignore
					s2 = peg$parsenonSchemaLine();
					// @ts-ignore
					if (s2 === peg$FAILED) {
						// @ts-ignore
						s2 = peg$parsecommentLine();
					}
				}
				// @ts-ignore
				while (s2 !== peg$FAILED) {
					// @ts-ignore
					s1.push(s2);
					// @ts-ignore
					s2 = peg$parseschemaDefinition();
					// @ts-ignore
					if (s2 === peg$FAILED) {
						// @ts-ignore
						s2 = peg$parsenonSchemaLine();
						// @ts-ignore
						if (s2 === peg$FAILED) {
							// @ts-ignore
							s2 = peg$parsecommentLine();
						}
					}
				}
				// @ts-ignore
				peg$savedPos = s0;
				// @ts-ignore
				s1 = peg$f0(s1);
				// @ts-ignore
				s0 = s1;

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parsecommentLine() {
				// @ts-ignore
				var s0, s1, s2, s3, s4, s5, s6;

				// @ts-ignore
				s0 = peg$currPos;
				// @ts-ignore
				s1 = peg$parseindentation();
				// @ts-ignore
				if (input.substr(peg$currPos, 2) === peg$c0) {
					// @ts-ignore
					s2 = peg$c0;
					// @ts-ignore
					peg$currPos += 2;
					// @ts-ignore
				} else {
					// @ts-ignore
					s2 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) {
						peg$fail(peg$e0);
					}
				}
				// @ts-ignore
				if (s2 !== peg$FAILED) {
					// @ts-ignore
					s3 = [];
					// @ts-ignore
					s4 = peg$currPos;
					// @ts-ignore
					s5 = peg$currPos;
					// @ts-ignore
					peg$silentFails++;
					// @ts-ignore
					s6 = peg$parselineBreak();
					// @ts-ignore
					peg$silentFails--;
					// @ts-ignore
					if (s6 === peg$FAILED) {
						// @ts-ignore
						s5 = undefined;
						// @ts-ignore
					} else {
						// @ts-ignore
						peg$currPos = s5;
						// @ts-ignore
						s5 = peg$FAILED;
					}
					// @ts-ignore
					if (s5 !== peg$FAILED) {
						// @ts-ignore
						if (input.length > peg$currPos) {
							// @ts-ignore
							s6 = input.charAt(peg$currPos);
							// @ts-ignore
							peg$currPos++;
							// @ts-ignore
						} else {
							// @ts-ignore
							s6 = peg$FAILED;
							// @ts-ignore
							if (peg$silentFails === 0) {
								peg$fail(peg$e1);
							}
						}
						// @ts-ignore
						if (s6 !== peg$FAILED) {
							// @ts-ignore
							s5 = [s5, s6];
							// @ts-ignore
							s4 = s5;
							// @ts-ignore
						} else {
							// @ts-ignore
							peg$currPos = s4;
							// @ts-ignore
							s4 = peg$FAILED;
						}
						// @ts-ignore
					} else {
						// @ts-ignore
						peg$currPos = s4;
						// @ts-ignore
						s4 = peg$FAILED;
					}
					// @ts-ignore
					while (s4 !== peg$FAILED) {
						// @ts-ignore
						s3.push(s4);
						// @ts-ignore
						s4 = peg$currPos;
						// @ts-ignore
						s5 = peg$currPos;
						// @ts-ignore
						peg$silentFails++;
						// @ts-ignore
						s6 = peg$parselineBreak();
						// @ts-ignore
						peg$silentFails--;
						// @ts-ignore
						if (s6 === peg$FAILED) {
							// @ts-ignore
							s5 = undefined;
							// @ts-ignore
						} else {
							// @ts-ignore
							peg$currPos = s5;
							// @ts-ignore
							s5 = peg$FAILED;
						}
						// @ts-ignore
						if (s5 !== peg$FAILED) {
							// @ts-ignore
							if (input.length > peg$currPos) {
								// @ts-ignore
								s6 = input.charAt(peg$currPos);
								// @ts-ignore
								peg$currPos++;
								// @ts-ignore
							} else {
								// @ts-ignore
								s6 = peg$FAILED;
								// @ts-ignore
								if (peg$silentFails === 0) {
									peg$fail(peg$e1);
								}
							}
							// @ts-ignore
							if (s6 !== peg$FAILED) {
								// @ts-ignore
								s5 = [s5, s6];
								// @ts-ignore
								s4 = s5;
								// @ts-ignore
							} else {
								// @ts-ignore
								peg$currPos = s4;
								// @ts-ignore
								s4 = peg$FAILED;
							}
							// @ts-ignore
						} else {
							// @ts-ignore
							peg$currPos = s4;
							// @ts-ignore
							s4 = peg$FAILED;
						}
					}
					// @ts-ignore
					s4 = peg$parselineBreak();
					// @ts-ignore
					if (s4 === peg$FAILED) {
						// @ts-ignore
						s4 = null;
					}
					// @ts-ignore
					peg$savedPos = s0;
					// @ts-ignore
					s0 = peg$f1();
					// @ts-ignore
				} else {
					// @ts-ignore
					peg$currPos = s0;
					// @ts-ignore
					s0 = peg$FAILED;
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parseschemaDefinition() {
				// @ts-ignore
				var s0, s1, s2, s3, s4;

				// @ts-ignore
				s0 = peg$currPos;
				// @ts-ignore
				s1 = peg$parsezodSchemaHeader();
				// @ts-ignore
				if (s1 !== peg$FAILED) {
					// @ts-ignore
					s2 = peg$parselineBreak();
					// @ts-ignore
					if (s2 === peg$FAILED) {
						// @ts-ignore
						s2 = null;
					}
					// @ts-ignore
					s3 = [];
					// @ts-ignore
					s4 = peg$parsepropertyLine();
					// @ts-ignore
					while (s4 !== peg$FAILED) {
						// @ts-ignore
						s3.push(s4);
						// @ts-ignore
						s4 = peg$parsepropertyLine();
					}
					// @ts-ignore
					peg$savedPos = s0;
					// @ts-ignore
					s0 = peg$f2(s1, s3);
					// @ts-ignore
				} else {
					// @ts-ignore
					peg$currPos = s0;
					// @ts-ignore
					s0 = peg$FAILED;
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parsenonSchemaLine() {
				// @ts-ignore
				var s0, s1, s2, s3, s4, s5;

				// @ts-ignore
				s0 = peg$currPos;
				// @ts-ignore
				s1 = [];
				// @ts-ignore
				s2 = peg$currPos;
				// @ts-ignore
				s3 = peg$currPos;
				// @ts-ignore
				peg$silentFails++;
				// @ts-ignore
				s4 = peg$parseschemaDefinition();
				// @ts-ignore
				peg$silentFails--;
				// @ts-ignore
				if (s4 === peg$FAILED) {
					// @ts-ignore
					s3 = undefined;
					// @ts-ignore
				} else {
					// @ts-ignore
					peg$currPos = s3;
					// @ts-ignore
					s3 = peg$FAILED;
				}
				// @ts-ignore
				if (s3 !== peg$FAILED) {
					// @ts-ignore
					s4 = peg$currPos;
					// @ts-ignore
					peg$silentFails++;
					// @ts-ignore
					s5 = peg$parsecommentLine();
					// @ts-ignore
					peg$silentFails--;
					// @ts-ignore
					if (s5 === peg$FAILED) {
						// @ts-ignore
						s4 = undefined;
						// @ts-ignore
					} else {
						// @ts-ignore
						peg$currPos = s4;
						// @ts-ignore
						s4 = peg$FAILED;
					}
					// @ts-ignore
					if (s4 !== peg$FAILED) {
						// @ts-ignore
						if (input.length > peg$currPos) {
							// @ts-ignore
							s5 = input.charAt(peg$currPos);
							// @ts-ignore
							peg$currPos++;
							// @ts-ignore
						} else {
							// @ts-ignore
							s5 = peg$FAILED;
							// @ts-ignore
							if (peg$silentFails === 0) {
								peg$fail(peg$e1);
							}
						}
						// @ts-ignore
						if (s5 !== peg$FAILED) {
							// @ts-ignore
							s3 = [s3, s4, s5];
							// @ts-ignore
							s2 = s3;
							// @ts-ignore
						} else {
							// @ts-ignore
							peg$currPos = s2;
							// @ts-ignore
							s2 = peg$FAILED;
						}
						// @ts-ignore
					} else {
						// @ts-ignore
						peg$currPos = s2;
						// @ts-ignore
						s2 = peg$FAILED;
					}
					// @ts-ignore
				} else {
					// @ts-ignore
					peg$currPos = s2;
					// @ts-ignore
					s2 = peg$FAILED;
				}
				// @ts-ignore
				if (s2 !== peg$FAILED) {
					// @ts-ignore
					while (s2 !== peg$FAILED) {
						// @ts-ignore
						s1.push(s2);
						// @ts-ignore
						s2 = peg$currPos;
						// @ts-ignore
						s3 = peg$currPos;
						// @ts-ignore
						peg$silentFails++;
						// @ts-ignore
						s4 = peg$parseschemaDefinition();
						// @ts-ignore
						peg$silentFails--;
						// @ts-ignore
						if (s4 === peg$FAILED) {
							// @ts-ignore
							s3 = undefined;
							// @ts-ignore
						} else {
							// @ts-ignore
							peg$currPos = s3;
							// @ts-ignore
							s3 = peg$FAILED;
						}
						// @ts-ignore
						if (s3 !== peg$FAILED) {
							// @ts-ignore
							s4 = peg$currPos;
							// @ts-ignore
							peg$silentFails++;
							// @ts-ignore
							s5 = peg$parsecommentLine();
							// @ts-ignore
							peg$silentFails--;
							// @ts-ignore
							if (s5 === peg$FAILED) {
								// @ts-ignore
								s4 = undefined;
								// @ts-ignore
							} else {
								// @ts-ignore
								peg$currPos = s4;
								// @ts-ignore
								s4 = peg$FAILED;
							}
							// @ts-ignore
							if (s4 !== peg$FAILED) {
								// @ts-ignore
								if (input.length > peg$currPos) {
									// @ts-ignore
									s5 = input.charAt(peg$currPos);
									// @ts-ignore
									peg$currPos++;
									// @ts-ignore
								} else {
									// @ts-ignore
									s5 = peg$FAILED;
									// @ts-ignore
									if (peg$silentFails === 0) {
										peg$fail(peg$e1);
									}
								}
								// @ts-ignore
								if (s5 !== peg$FAILED) {
									// @ts-ignore
									s3 = [s3, s4, s5];
									// @ts-ignore
									s2 = s3;
									// @ts-ignore
								} else {
									// @ts-ignore
									peg$currPos = s2;
									// @ts-ignore
									s2 = peg$FAILED;
								}
								// @ts-ignore
							} else {
								// @ts-ignore
								peg$currPos = s2;
								// @ts-ignore
								s2 = peg$FAILED;
							}
							// @ts-ignore
						} else {
							// @ts-ignore
							peg$currPos = s2;
							// @ts-ignore
							s2 = peg$FAILED;
						}
					}
					// @ts-ignore
				} else {
					// @ts-ignore
					s1 = peg$FAILED;
				}
				// @ts-ignore
				if (s1 !== peg$FAILED) {
					// @ts-ignore
					s2 = peg$parselineBreak();
					// @ts-ignore
					if (s2 === peg$FAILED) {
						// @ts-ignore
						s2 = null;
					}
					// @ts-ignore
					peg$savedPos = s0;
					// @ts-ignore
					s0 = peg$f3();
					// @ts-ignore
				} else {
					// @ts-ignore
					peg$currPos = s0;
					// @ts-ignore
					s0 = peg$FAILED;
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parsepropertyLine() {
				// @ts-ignore
				var s0;

				// @ts-ignore
				s0 = peg$parsepropertyDefinition();
				// @ts-ignore
				if (s0 === peg$FAILED) {
					// @ts-ignore
					s0 = peg$parsecommentLine();
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parsepropertyDefinition() {
				// @ts-ignore
				var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

				// @ts-ignore
				s0 = peg$currPos;
				// @ts-ignore
				s1 = peg$parseindentation();
				// @ts-ignore
				s2 = peg$parseidentifier();
				// @ts-ignore
				s3 = peg$parseindentation();
				// @ts-ignore
				if (input.charCodeAt(peg$currPos) === 58) {
					// @ts-ignore
					s4 = peg$c1;
					// @ts-ignore
					peg$currPos++;
					// @ts-ignore
				} else {
					// @ts-ignore
					s4 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) {
						peg$fail(peg$e2);
					}
				}
				// @ts-ignore
				if (s4 !== peg$FAILED) {
					// @ts-ignore
					s5 = peg$parseindentation();
					// @ts-ignore
					s6 = peg$parseidentifier();
					// @ts-ignore
					s7 = peg$parseconnma();
					// @ts-ignore
					if (s7 === peg$FAILED) {
						// @ts-ignore
						s7 = null;
					}
					// @ts-ignore
					s8 = peg$parseendOfLine();
					// @ts-ignore
					if (s8 === peg$FAILED) {
						// @ts-ignore
						s8 = null;
					}
					// @ts-ignore
					s9 = peg$parselineBreak();
					// @ts-ignore
					if (s9 === peg$FAILED) {
						// @ts-ignore
						s9 = null;
					}
					// @ts-ignore
					s10 = peg$parseendOfLine();
					// @ts-ignore
					if (s10 === peg$FAILED) {
						// @ts-ignore
						s10 = null;
					}
					// @ts-ignore
					peg$savedPos = s0;
					// @ts-ignore
					s0 = peg$f4(s2, s6);
					// @ts-ignore
				} else {
					// @ts-ignore
					peg$currPos = s0;
					// @ts-ignore
					s0 = peg$FAILED;
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parseindentation() {
				// @ts-ignore
				var s0, s1;

				// @ts-ignore
				s0 = [];
				// @ts-ignore
				if (peg$r0.test(input.charAt(peg$currPos))) {
					// @ts-ignore
					s1 = input.charAt(peg$currPos);
					// @ts-ignore
					peg$currPos++;
					// @ts-ignore
				} else {
					// @ts-ignore
					s1 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) {
						peg$fail(peg$e3);
					}
				}
				// @ts-ignore
				while (s1 !== peg$FAILED) {
					// @ts-ignore
					s0.push(s1);
					// @ts-ignore
					if (peg$r0.test(input.charAt(peg$currPos))) {
						// @ts-ignore
						s1 = input.charAt(peg$currPos);
						// @ts-ignore
						peg$currPos++;
						// @ts-ignore
					} else {
						// @ts-ignore
						s1 = peg$FAILED;
						// @ts-ignore
						if (peg$silentFails === 0) {
							peg$fail(peg$e3);
						}
					}
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parseidentifier() {
				// @ts-ignore
				var s0, s1, s2, s3;

				// @ts-ignore
				s0 = peg$currPos;
				// @ts-ignore
				s1 = peg$currPos;
				// @ts-ignore
				s2 = [];
				// @ts-ignore
				s3 = peg$parsecharacter();
				// @ts-ignore
				while (s3 !== peg$FAILED) {
					// @ts-ignore
					s2.push(s3);
					// @ts-ignore
					s3 = peg$parsecharacter();
				}
				// @ts-ignore
				s1 = input.substring(s1, peg$currPos);
				// @ts-ignore
				peg$savedPos = s0;
				// @ts-ignore
				s1 = peg$f5(s1);
				// @ts-ignore
				s0 = s1;

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parsecharacter() {
				// @ts-ignore
				var s0, s1, s2;

				// @ts-ignore
				s0 = peg$currPos;
				// @ts-ignore
				s1 = peg$currPos;
				// @ts-ignore
				peg$silentFails++;
				// @ts-ignore
				if (input.charCodeAt(peg$currPos) === 58) {
					// @ts-ignore
					s2 = peg$c1;
					// @ts-ignore
					peg$currPos++;
					// @ts-ignore
				} else {
					// @ts-ignore
					s2 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) {
						peg$fail(peg$e2);
					}
				}
				// @ts-ignore
				if (s2 === peg$FAILED) {
					// @ts-ignore
					if (input.charCodeAt(peg$currPos) === 32) {
						// @ts-ignore
						s2 = peg$c2;
						// @ts-ignore
						peg$currPos++;
						// @ts-ignore
					} else {
						// @ts-ignore
						s2 = peg$FAILED;
						// @ts-ignore
						if (peg$silentFails === 0) {
							peg$fail(peg$e4);
						}
					}
					// @ts-ignore
					if (s2 === peg$FAILED) {
						// @ts-ignore
						if (input.charCodeAt(peg$currPos) === 61) {
							// @ts-ignore
							s2 = peg$c3;
							// @ts-ignore
							peg$currPos++;
							// @ts-ignore
						} else {
							// @ts-ignore
							s2 = peg$FAILED;
							// @ts-ignore
							if (peg$silentFails === 0) {
								peg$fail(peg$e5);
							}
						}
						// @ts-ignore
						if (s2 === peg$FAILED) {
							// @ts-ignore
							if (input.charCodeAt(peg$currPos) === 44) {
								// @ts-ignore
								s2 = peg$c4;
								// @ts-ignore
								peg$currPos++;
								// @ts-ignore
							} else {
								// @ts-ignore
								s2 = peg$FAILED;
								// @ts-ignore
								if (peg$silentFails === 0) {
									peg$fail(peg$e6);
								}
							}
							// @ts-ignore
							if (s2 === peg$FAILED) {
								// @ts-ignore
								s2 = peg$parselineBreak();
							}
						}
					}
				}
				// @ts-ignore
				peg$silentFails--;
				// @ts-ignore
				if (s2 === peg$FAILED) {
					// @ts-ignore
					s1 = undefined;
					// @ts-ignore
				} else {
					// @ts-ignore
					peg$currPos = s1;
					// @ts-ignore
					s1 = peg$FAILED;
				}
				// @ts-ignore
				if (s1 !== peg$FAILED) {
					// @ts-ignore
					if (input.length > peg$currPos) {
						// @ts-ignore
						s2 = input.charAt(peg$currPos);
						// @ts-ignore
						peg$currPos++;
						// @ts-ignore
					} else {
						// @ts-ignore
						s2 = peg$FAILED;
						// @ts-ignore
						if (peg$silentFails === 0) {
							peg$fail(peg$e1);
						}
					}
					// @ts-ignore
					if (s2 !== peg$FAILED) {
						// @ts-ignore
						peg$savedPos = s0;
						// @ts-ignore
						s0 = peg$f6(s2);
						// @ts-ignore
					} else {
						// @ts-ignore
						peg$currPos = s0;
						// @ts-ignore
						s0 = peg$FAILED;
					}
					// @ts-ignore
				} else {
					// @ts-ignore
					peg$currPos = s0;
					// @ts-ignore
					s0 = peg$FAILED;
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parseendOfLine() {
				// @ts-ignore
				var s0;

				// @ts-ignore
				if (input.substr(peg$currPos, 3) === peg$c5) {
					// @ts-ignore
					s0 = peg$c5;
					// @ts-ignore
					peg$currPos += 3;
					// @ts-ignore
				} else {
					// @ts-ignore
					s0 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) {
						peg$fail(peg$e7);
					}
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parsezodSchemaStart() {
				// @ts-ignore
				var s0;

				// @ts-ignore
				if (input.substr(peg$currPos, 10) === peg$c6) {
					// @ts-ignore
					s0 = peg$c6;
					// @ts-ignore
					peg$currPos += 10;
					// @ts-ignore
				} else {
					// @ts-ignore
					s0 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) {
						peg$fail(peg$e8);
					}
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parsezodSchemaHeader() {
				// @ts-ignore
				var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

				// @ts-ignore
				s0 = peg$currPos;
				// @ts-ignore
				s1 = peg$parseexportKeyword();
				// @ts-ignore
				if (s1 !== peg$FAILED) {
					// @ts-ignore
					s2 = peg$parseindentation();
					// @ts-ignore
					s3 = peg$parseconstKeyword();
					// @ts-ignore
					if (s3 !== peg$FAILED) {
						// @ts-ignore
						s4 = peg$parseindentation();
						// @ts-ignore
						s5 = peg$parseidentifier();
						// @ts-ignore
						s6 = peg$parseindentation();
						// @ts-ignore
						if (input.charCodeAt(peg$currPos) === 61) {
							// @ts-ignore
							s7 = peg$c3;
							// @ts-ignore
							peg$currPos++;
							// @ts-ignore
						} else {
							// @ts-ignore
							s7 = peg$FAILED;
							// @ts-ignore
							if (peg$silentFails === 0) {
								peg$fail(peg$e5);
							}
						}
						// @ts-ignore
						if (s7 !== peg$FAILED) {
							// @ts-ignore
							s8 = peg$parseindentation();
							// @ts-ignore
							s9 = peg$parsezodSchemaStart();
							// @ts-ignore
							if (s9 !== peg$FAILED) {
								// @ts-ignore
								s10 = peg$parseindentation();
								// @ts-ignore
								peg$savedPos = s0;
								// @ts-ignore
								s0 = peg$f7(s5);
								// @ts-ignore
							} else {
								// @ts-ignore
								peg$currPos = s0;
								// @ts-ignore
								s0 = peg$FAILED;
							}
							// @ts-ignore
						} else {
							// @ts-ignore
							peg$currPos = s0;
							// @ts-ignore
							s0 = peg$FAILED;
						}
						// @ts-ignore
					} else {
						// @ts-ignore
						peg$currPos = s0;
						// @ts-ignore
						s0 = peg$FAILED;
					}
					// @ts-ignore
				} else {
					// @ts-ignore
					peg$currPos = s0;
					// @ts-ignore
					s0 = peg$FAILED;
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parseconnma() {
				// @ts-ignore
				var s0;

				// @ts-ignore
				if (input.charCodeAt(peg$currPos) === 44) {
					// @ts-ignore
					s0 = peg$c4;
					// @ts-ignore
					peg$currPos++;
					// @ts-ignore
				} else {
					// @ts-ignore
					s0 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) {
						peg$fail(peg$e6);
					}
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parseconstKeyword() {
				// @ts-ignore
				var s0;

				// @ts-ignore
				if (input.substr(peg$currPos, 5) === peg$c7) {
					// @ts-ignore
					s0 = peg$c7;
					// @ts-ignore
					peg$currPos += 5;
					// @ts-ignore
				} else {
					// @ts-ignore
					s0 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) {
						peg$fail(peg$e9);
					}
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parseexportKeyword() {
				// @ts-ignore
				var s0;

				// @ts-ignore
				if (input.substr(peg$currPos, 6) === peg$c8) {
					// @ts-ignore
					s0 = peg$c8;
					// @ts-ignore
					peg$currPos += 6;
					// @ts-ignore
				} else {
					// @ts-ignore
					s0 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) {
						peg$fail(peg$e10);
					}
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			function // @ts-ignore
			peg$parselineBreak() {
				// @ts-ignore
				var s0;

				// @ts-ignore
				if (input.charCodeAt(peg$currPos) === 10) {
					// @ts-ignore
					s0 = peg$c9;
					// @ts-ignore
					peg$currPos++;
					// @ts-ignore
				} else {
					// @ts-ignore
					s0 = peg$FAILED;
					// @ts-ignore
					if (peg$silentFails === 0) {
						peg$fail(peg$e11);
					}
				}
				// @ts-ignore
				if (s0 === peg$FAILED) {
					// @ts-ignore
					if (input.substr(peg$currPos, 2) === peg$c10) {
						// @ts-ignore
						s0 = peg$c10;
						// @ts-ignore
						peg$currPos += 2;
						// @ts-ignore
					} else {
						// @ts-ignore
						s0 = peg$FAILED;
						// @ts-ignore
						if (peg$silentFails === 0) {
							peg$fail(peg$e12);
						}
					}
					// @ts-ignore
					if (s0 === peg$FAILED) {
						// @ts-ignore
						if (input.charCodeAt(peg$currPos) === 13) {
							// @ts-ignore
							s0 = peg$c11;
							// @ts-ignore
							peg$currPos++;
							// @ts-ignore
						} else {
							// @ts-ignore
							s0 = peg$FAILED;
							// @ts-ignore
							if (peg$silentFails === 0) {
								peg$fail(peg$e13);
							}
						}
					}
				}

				// @ts-ignore
				return s0;
			}

			// @ts-ignore
			peg$result = peg$startRuleFunction();

			// @ts-ignore
			if (peg$result !== peg$FAILED && peg$currPos === input.length) {
				// @ts-ignore
				return peg$result;
				// @ts-ignore
			} else {
				// @ts-ignore
				if (peg$result !== peg$FAILED && peg$currPos < input.length) {
					// @ts-ignore
					peg$fail(peg$endExpectation());
				}

				// @ts-ignore
				throw peg$buildStructuredError(
					// @ts-ignore
					peg$maxFailExpected,
					// @ts-ignore
					peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
					// @ts-ignore
					peg$maxFailPos < input.length
						? // @ts-ignore
						  peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
						: // @ts-ignore
						  peg$computeLocation(peg$maxFailPos, peg$maxFailPos),
				);
			}
		}

		// @ts-ignore
		return {
			SyntaxError: peg$SyntaxError,
			parse: peg$parse,
		};
	})();

export interface FilePosition {
	offset: number;
	line: number;
	column: number;
}

export interface FileRange {
	start: FilePosition;
	end: FilePosition;
	source: string;
}

export interface LiteralExpectation {
	type: "literal";
	text: string;
	ignoreCase: boolean;
}

export interface ClassParts extends Array<string | ClassParts> {}

export interface ClassExpectation {
	type: "class";
	parts: ClassParts;
	inverted: boolean;
	ignoreCase: boolean;
}

export interface AnyExpectation {
	type: "any";
}

export interface EndExpectation {
	type: "end";
}

export interface OtherExpectation {
	type: "other";
	description: string;
}

export type Expectation =
	| LiteralExpectation
	| ClassExpectation
	| AnyExpectation
	| EndExpectation
	| OtherExpectation;

declare class _PeggySyntaxError extends Error {
	public static buildMessage(
		expected: Expectation[],
		found: string | null,
	): string;
	public message: string;
	public expected: Expectation[];
	public found: string | null;
	public location: FileRange;
	public name: string;
	constructor(
		message: string,
		expected: Expectation[],
		found: string | null,
		location: FileRange,
	);
	format(
		sources: {
			source?: any;
			text: string;
		}[],
	): string;
}

export interface TraceEvent {
	type: string;
	rule: string;
	result?: any;
	location: FileRange;
}

declare class _DefaultTracer {
	private indentLevel: number;
	public trace(event: TraceEvent): void;
}

peggyParser.SyntaxError.prototype.name = "PeggySyntaxError";

export interface ParseOptions {
	filename?: string;
	startRule?: "start";
	tracer?: any;
	[key: string]: any;
}
export type ParseFunction = <Options extends ParseOptions>(
	input: string,
	options?: Options,
) => Options extends { startRule: infer StartRule }
	? StartRule extends "start"
		? Start
		: Start
	: Start;
export const parse: ParseFunction = peggyParser.parse;

export const PeggySyntaxError =
	peggyParser.SyntaxError as typeof _PeggySyntaxError;

export type PeggySyntaxError = _PeggySyntaxError;

// These types were autogenerated by ts-pegjs
export type Start = any[];
export type CommentLine = null;
export type SchemaDefinition = {
	tableName: ZodSchemaHeader;
	properties: PropertyLine[];
};
export type NonSchemaLine = null;
export type PropertyLine = PropertyDefinition | CommentLine;
export type PropertyDefinition = { name: Identifier; schema: Identifier };
export type Indentation = string[];
export type Identifier = string;
export type Character = string;
export type EndOfLine = "});";
export type ZodSchemaStart = "z.object({";
export type ZodSchemaHeader = Identifier;
export type Connma = ",";
export type ConstKeyword = "const";
export type ExportKeyword = "export";
export type LineBreak = "\n" | "\r\n" | "\r";
